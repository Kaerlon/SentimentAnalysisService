// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SentimentAnalysis.Bot.Data;

namespace SentimentAnalysis.Bot.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210913171443_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("SentimentAnalysis.Bot.Models.ChatSettings", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ServantListNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SupportListNotifications")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ChatSettings");
                });

            modelBuilder.Entity("SentimentAnalysis.Bot.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("SentimentAnalysis.Bot.Models.RegisteredChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ChatId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ChatId1");

                    b.HasIndex("PersonId");

                    b.ToTable("RegisteredChats");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.DbContexts.Data", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "Key");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.DbContexts.Newsletter", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.DbContexts.NewsletterChat", b =>
                {
                    b.Property<string>("NewsletterKey")
                        .HasColumnType("TEXT");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NewsletterKey", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("NewsletterChats");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.DbContexts.TelegramChat", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("CanSetStickerSet")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("InviteLink")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("StickerSetName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SentimentAnalysis.Bot.Models.ChatSettings", b =>
                {
                    b.HasOne("Telegram.Bot.Advanced.DbContexts.TelegramChat", "TelegramChat")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelegramChat");
                });

            modelBuilder.Entity("SentimentAnalysis.Bot.Models.Person", b =>
                {
                    b.HasOne("Telegram.Bot.Advanced.DbContexts.TelegramChat", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SentimentAnalysis.Bot.Models.RegisteredChat", b =>
                {
                    b.HasOne("Telegram.Bot.Advanced.DbContexts.TelegramChat", null)
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Telegram.Bot.Advanced.DbContexts.TelegramChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId1");

                    b.HasOne("SentimentAnalysis.Bot.Models.Person", "Person")
                        .WithMany("RegisteredChats")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.DbContexts.Data", b =>
                {
                    b.HasOne("Telegram.Bot.Advanced.DbContexts.TelegramChat", "Chat")
                        .WithMany("Data")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.DbContexts.NewsletterChat", b =>
                {
                    b.HasOne("Telegram.Bot.Advanced.DbContexts.TelegramChat", "Chat")
                        .WithMany("NewsletterChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telegram.Bot.Advanced.DbContexts.Newsletter", "Newsletter")
                        .WithMany("NewsletterChats")
                        .HasForeignKey("NewsletterKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Newsletter");
                });

            modelBuilder.Entity("SentimentAnalysis.Bot.Models.Person", b =>
                {
                    b.Navigation("RegisteredChats");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.DbContexts.Newsletter", b =>
                {
                    b.Navigation("NewsletterChats");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.DbContexts.TelegramChat", b =>
                {
                    b.Navigation("Data");

                    b.Navigation("NewsletterChats");
                });
#pragma warning restore 612, 618
        }
    }
}
